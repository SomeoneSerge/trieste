:orphan:

:py:mod:`trieste.models.keras.utils`
====================================

.. py:module:: trieste.models.keras.utils


Module Contents
---------------

.. py:function:: get_tensor_spec_from_data(dataset: trieste.data.Dataset) -> tuple[tensorflow.TensorSpec, tensorflow.TensorSpec]

   Extract tensor specifications for inputs and outputs of neural network models, based on the
   dataset. This utility faciliates constructing neural networks, providing the required
   dimensions for the input and the output of the network. For example

   >>> data = Dataset(
   ...     tf.constant([[0.1, 0.2], [0.3, 0.4]]),
   ...     tf.constant([[0.5], [0.7]])
   ... )
   >>> input_spec, output_spec = get_tensor_spec_from_data(data)
   >>> input_spec
   TensorSpec(shape=(2,), dtype=tf.float32, name='query_points')
   >>> output_spec
   TensorSpec(shape=(1,), dtype=tf.float32, name='observations')

   :param dataset: A dataset with ``query_points`` and ``observations`` tensors.
   :return: Tensor specification objects for the ``query_points`` and ``observations`` tensors.
   :raise ValueError: If the dataset is not an instance of :class:`~trieste.data.Dataset`.


.. py:function:: sample_with_replacement(dataset: trieste.data.Dataset) -> trieste.data.Dataset

   Create a new ``dataset`` with data sampled with replacement. This
   function is useful for creating bootstrap samples of data for training ensembles.

   :param dataset: The data that should be sampled.
   :return: A (new) ``dataset`` with sampled data.
   :raise ValueError (or InvalidArgumentError): If the dataset is not an instance of
       :class:`~trieste.data.Dataset` or it is empty.


